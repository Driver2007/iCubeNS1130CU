#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        ICubeNS1130CU.py
#
#  Project :     iCubeNS1130CU
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      sergey.v.babenkov$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["ICubeNS1130CU", "ICubeNS1130CUClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(ICubeNS1130CU.additionnal_import) ENABLED START -----#
from ctypes import *
import time
import threading
import numpy as np
import imageio
import struct
Modes = {
    0:"320x240",
    1:"640x480",
    2:"752x480",
    3:"800x600",
    4:"1024x768",
    5:"1280x1024",
    6:"1600x1200",
    7:"2048x1536",
    8:"2592x1944",
    9:"3840x2748"
}
import imageio
from PIL import Image
#from PIL import Image
class Effect(Structure):
    _fields_ = [("ptr", c_void_p)]
#----- PROTECTED REGION END -----#	//	ICubeNS1130CU.additionnal_import

# Device States Description
# No states for this device


class ICubeNS1130CU (PyTango.Device_4Impl):
    """iCubeNS1130CU"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(ICubeNS1130CU.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        ICubeNS1130CU.init_device(self)
        #----- PROTECTED REGION ID(ICubeNS1130CU.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(ICubeNS1130CU.delete_device) ENABLED START -----#
        self.close()
        del self.attr_image_r_read
        del self.attr_image_g_read
        del self.attr_image_b_read
        del self.image_rgb
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_server_message_read = ""
        self.attr_Mode_read = 0
        self.attr_set_exposure_read = 0.0
        self.attr_Camra_name_read = ""
        self.attr_Resolution_read = ""
        self.attr_image_r_read = [[0]]
        self.attr_image_g_read = [[0]]
        self.attr_image_b_read = [[0]]
        #----- PROTECTED REGION ID(ICubeNS1130CU.init_device) ENABLED START -----#
        #self.so_file = '/home/sergey/bin/TangoServers/iCube/test.so'
        print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
        self.camera = CDLL('/home/user/Git/iCubeNS1130CU/test.so')
        self.cam_index=0
        self.connect()
        self.check_camera_mode_trg=True
        self.streaming_trg=False
        self.image_rgb=[[[0]]]
        self.effect = Effect()
        if not 'get_image' in dir(self):
            self.get_image = threading.Thread(target=self.image)
            self.get_image.setDaemon(True)
            self.get_image.start()        
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(ICubeNS1130CU.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.always_executed_hook

    # -------------------------------------------------------------------------
    #    ICubeNS1130CU read/write attribute methods
    # -------------------------------------------------------------------------
    
    def write_open_close(self, attr):
        self.debug_stream("In write_open_close()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(ICubeNS1130CU.open_close_write) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.open_close_write
        
    def read_server_message(self, attr):
        self.debug_stream("In read_server_message()")
        #----- PROTECTED REGION ID(ICubeNS1130CU.server_message_read) ENABLED START -----#
        attr.set_value(self.attr_server_message_read)
        
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.server_message_read
        
    def read_Mode(self, attr):
        self.debug_stream("In read_Mode()")
        #----- PROTECTED REGION ID(ICubeNS1130CU.Mode_read) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON and self.check_camera_mode_trg==True:
            self.attr_Mode_read=self.camera._Z7GetModei(self.cam_index)
            self.attr_Resolution_read=Modes[self.attr_Mode_read]
            self.check_camera_mode_trg=False
        attr.set_value(self.attr_Mode_read)
        
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.Mode_read
        
    def write_Mode(self, attr):
        self.debug_stream("In write_Mode()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(ICubeNS1130CU.Mode_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            self.camera._Z7SetModeii(self.cam_index,data)
            self.check_camera_mode_trg=True
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.Mode_write
        
    def write_start_stop_streaming(self, attr):
        self.debug_stream("In write_start_stop_streaming()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(ICubeNS1130CU.start_stop_streaming_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            if data==True:
                self.img_buffer  = create_string_buffer( 3932160 )
                self.mypointer = addressof(self.img_buffer)
                self.camera._Z12set_callbackiPv.argtypes = [c_int, c_void_p]
                callback=self.camera._Z12set_callbackiPv(self.cam_index, self.mypointer)
                streaming=self.camera._Z15start_streamingi(self.cam_index)
                #for i in range (len(self.img_buffer)):
                #   print "ir2 nr:", i, "buffer:",self.img_buffer[i]                
                if callback==0 and streaming==0:
                    
                    self.streaming_trg=True
            elif data==False:
                self.streaming_trg=False
                self.camera._Z14stop_streamingi(self.cam_index)
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.start_stop_streaming_write
        
    def read_set_exposure(self, attr):
        self.debug_stream("In read_set_exposure()")
        #----- PROTECTED REGION ID(ICubeNS1130CU.set_exposure_read) ENABLED START -----#
        attr.set_value(self.attr_set_exposure_read)
        if self.get_state() == PyTango.DevState.ON:
            self.attr_set_exposure_read=self.camera._Z12get_exposurei(self.cam_index)
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.set_exposure_read
        
    def write_set_exposure(self, attr):
        self.debug_stream("In write_set_exposure()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(ICubeNS1130CU.set_exposure_write) ENABLED START -----#
        if self.get_state() == PyTango.DevState.ON:
            print "data", data
            self.camera._Z12set_exposureif(self.cam_index,c_float(data))      
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.set_exposure_write
        
    def read_Camra_name(self, attr):
        self.debug_stream("In read_Camra_name()")
        #----- PROTECTED REGION ID(ICubeNS1130CU.Camra_name_read) ENABLED START -----#
        attr.set_value(self.attr_Camra_name_read)
        
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.Camra_name_read
        
    def read_Resolution(self, attr):
        self.debug_stream("In read_Resolution()")
        #----- PROTECTED REGION ID(ICubeNS1130CU.Resolution_read) ENABLED START -----#
        attr.set_value(self.attr_Resolution_read)
        
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.Resolution_read
        
    def read_image_r(self, attr):
        self.debug_stream("In read_image_r()")
        #----- PROTECTED REGION ID(ICubeNS1130CU.image_r_read) ENABLED START -----#
        attr.set_value(self.attr_image_r_read)
        
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.image_r_read
        
    def read_image_g(self, attr):
        self.debug_stream("In read_image_g()")
        #----- PROTECTED REGION ID(ICubeNS1130CU.image_g_read) ENABLED START -----#
        attr.set_value(self.attr_image_g_read)
        
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.image_g_read
        
    def read_image_b(self, attr):
        self.debug_stream("In read_image_b()")
        #----- PROTECTED REGION ID(ICubeNS1130CU.image_b_read) ENABLED START -----#
        attr.set_value(self.attr_image_b_read)
        
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.image_b_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(ICubeNS1130CU.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.read_attr_hardware


    # -------------------------------------------------------------------------
    #    ICubeNS1130CU command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(ICubeNS1130CU.programmer_methods) ENABLED START -----#
        
    def connect(self):
        self.cam_index=self.camera.main()
        if self.cam_index==0:
            self.set_state(PyTango.DevState.ON)
            self.attr_server_message_read="camera is found"
        elif self.cam_index==97:
            self.set_state(PyTango.DevState.FAULT)
            self.attr_server_message_read="camera not found"
        elif self.cam_index==98:
            self.set_state(PyTango.DevState.FAULT)
            self.attr_server_message_read="camera not opend"

        string_buffers = [create_string_buffer(20) for i in range(2)]
        pointers = (c_char_p*2)(*map(addressof, string_buffers))
        self.camera._Z4nameiPPc(self.cam_index, pointers)
        results = [s.value for s in string_buffers]
        self.attr_Camra_name_read=results[0]

    def hex64_str(self,item):
        return "0x{:016X}".format(item)

    def print_addr(self,ctypes_inst, inst_name, heading=""):
        print("{:s}{:s} addr: {:s} (type: {:})".format(heading, "{:s}".format(inst_name) if inst_name else "", self.hex64_str(addressof(ctypes_inst)), type(ctypes_inst)))

    def close(self):
        if self.cam_index==0:
            self.streaming_trg=False
            self.camera._Z14stop_streamingi(self.cam_index)
            self.camera.close(self.cam_index)
        
    def image(self):
        while True:
            if self.get_state() == PyTango.DevState.ON and self.streaming_trg==True:    
                resolution=Modes[self.attr_Mode_read]
                x,y=resolution.split("x")
                self.image_rgb=np.array([[[0]*3]*int(y)]*(int(x)),dtype=np.int)
                name=0
                while self.streaming_trg==True:
                    time.sleep(1)
                    print ord(list(self.img_buffer)[0])
                    m=0
                    for k in range(3):
                        for j in range (int(y)):
                            for i in range(int(x)):
                                self.image_rgb[i][j][k]=ord(self.img_buffer[m])
                                m+=1
                    #imlist = []
                    self.image_rgb = self.image_rgb.astype('int8')
                    #for k in range(3):
                    #newimage = self.image_rgb[k, :, :]
                    #imageio.imwrite("image%d.tif" %name, self.image_rgb)
                    img = Image.fromarray(self.image_rgb, 'RGB')
                    img.save("out.png")
                    #imwrite(str(name)+'temp.tif', self.image_rgb, photometric='minisblack')
                    #for m in self.image_rgb:
                    #    imlist.append(Image.fromarray(m.astype('uint16')))
                    #imlist[0].save(str(name)+".tiff", compression="tiff_deflate", save_all=True, append_images=imlist[1:])
                    name+=1                    
                    #print self.image_rgb


            time.sleep(1)
    #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.programmer_methods

class ICubeNS1130CUClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(ICubeNS1130CU.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'open_close':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'server_message':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'Mode':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'max value': "9",
                'min value': "0",
            } ],
        'start_stop_streaming':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'set_exposure':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'max value': "633",
                'min value': "0",
            } ],
        'Camra_name':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'Resolution':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'image_r':
            [[PyTango.DevLong,
            PyTango.IMAGE,
            PyTango.READ, 3000, 3000]],
        'image_g':
            [[PyTango.DevLong,
            PyTango.IMAGE,
            PyTango.READ, 3000, 3000]],
        'image_b':
            [[PyTango.DevLong,
            PyTango.IMAGE,
            PyTango.READ, 3000, 3000]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(ICubeNS1130CUClass, ICubeNS1130CU, 'ICubeNS1130CU')
        #----- PROTECTED REGION ID(ICubeNS1130CU.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	ICubeNS1130CU.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()

